#' @return Data frame sin sitios de mutación fijos.
## Eliminar sitios que están fijos en cada línea
tab<-data.frame(table(breseq_annotated[breseq_annotated$freq==1,"Line"],breseq_annotated[breseq_annotated$freq==1,"position"])) # tabla de sitios fijos, Freq =1. Esto significa que la mutación está fija en esa línea.
tab<-tab[tab$Freq>0,] #Filtra la tabla tab para eliminar las combinaciones línea-mutación que no tienen ninguna mutación (Freq > 0).
mut_tab<-data.frame(table(tab$Var2))  #Se crea otra tabla que cuenta en cuántas líneas aparece cada mutación. La columna Var2 representa las posiciones de mutación.
sites_to_remove<-as.character(mut_tab[mut_tab$Freq==length(unique(breseq_annotated$Line)),"Var1"])
breseq_annotated<-breseq_annotated[!breseq_annotated$position%in%sites_to_remove,] #Filtra el data frame original breseq_annotated para eliminar las posiciones de mutación que están en el vector -sites_to_remove-, es decir, los sitios fijos.
dim(breseq_annotated)
# --- Function: Restructure Frameshift Mutations ----
#' @title Restructurar Mutaciones por Desplazamiento de Lectura
#' @description Restructura las mutaciones por desplazamiento de lectura para ser consistentes con las mutaciones puntuales.
#' @param breseq_annotated Data frame. Contiene los datos anotados de breseq.
#' @return Data frame con las mutaciones por desplazamiento de lectura restructuradas.
## Restructurar las mutaciones por desplazamiento de lectura para ser consistentes con las mutaciones puntuales
for (i in seq(1,nrow(breseq_annotated))){
pos<-breseq_annotated[i,"position"]
if (grepl(":",pos,fixed=TRUE)){
pos<-unlist(strsplit(pos,split=":"))[1]
pos<-paste(unlist(strsplit(pos,split=",")),collapse="")
breseq_annotated[i,"position"]<-pos
}
}
breseq_annotated$position<-as.numeric(breseq_annotated$position)
# --- Function: Restructure Gene Column ----
#' @title Restructurar Columna de Genes
#' @description Restructura la columna de genes para eliminar la dirección.
#' @param breseq_annotated Data frame. Contiene los datos anotados de breseq.
#' @return Data frame con la columna de genes restructurada.
## Restructurar la columna de genes para eliminar la dirección
for (i in seq(1,nrow(breseq_annotated))){
breseq_annotated[i,"gene_2"]<-substr(breseq_annotated[i,"gene"],1,nchar(breseq_annotated[i,"gene"])-2) # recorre cada fila y elimina los últimos dos caracteres
}
# --- Function: Filter Mutations with Sliding Window ----
#' @title Filtrar Mutaciones con Ventana Deslizante
#' @description Filtra las mutaciones utilizando una ventana deslizante de 50 bp dentro de cada línea/punto de tiempo.
#' @param breseq_annotated Data frame. Contiene los datos anotados de breseq.
#' @param N Numérico. Número máximo de vecinos permitidos dentro de la ventana deslizante.
#' @return Data frame con las mutaciones filtradas.
#Si una ventana contiene más de N mutaciones, todas las mutaciones en esa ventana se eliminan.
breseq_annotated_filtered<-data.frame() #data frame vacío
N=4  #establece que si hay más de 4 mutaciones dentro de una ventana de 50 bp, las mutaciones serán eliminadas.
for (sample in unique(breseq_annotated$Sample)){
pre_filter_POS<-sort(as.numeric(breseq_annotated[breseq_annotated$Sample==sample,"position"])) #se ordenan las posiciones de las mutaciones (pre_filter_POS) en formato numérico.
sites_to_remove<-c() # -sites_to_remove- almacenará las posiciones que deben ser eliminadas.
for (pos in pre_filter_POS){
# ventana deslizante
min=pos-50
while (min<pos){
max<-min+50
if (length(pre_filter_POS[pre_filter_POS>=min & pre_filter_POS<max])>N)   {sites_to_remove<-unique(c(sites_to_remove,pre_filter_POS[pre_filter_POS>=min & pre_filter_POS<max]))} # si una ventana contiene más de 3 mutaciones, elimine todas
min<-min+1
}
}
#' @title Filtrar y Anotar Datos Genéticos
#'
#' @Description Esta función filtra los sitios basándose en una muestra proporcionada y una lista de sitios a eliminar, y luego categoriza las anotaciones en los datos filtrados.
#'
#' @param breseq_annotated Un data frame que contiene los datos genéticos anotados.
#' @param sample Una cadena que indica la muestra por la que filtrar.
#' @param sites_to_remove Un vector de posiciones a eliminar de los datos.
#'
#' @return Un data frame con anotaciones filtradas y tipos actualizados.
### filtrar sitios
post_filter<-breseq_annotated[breseq_annotated$Sample==sample & !breseq_annotated$position%in%sites_to_remove,] #seleccionar únicamente las filas correspondientes a la muestra indicada por sample y eliminar aquellas posiciones de sitios que estén en la lista sites_to_remove.
breseq_annotated_filtered<-rbind(breseq_annotated_filtered,post_filter) # data frame resultante (post_filter) se añade al data frame global breseq_annotated_filtered utilizando la función rbind(), lo que permite acumular los datos filtrados para cada muestra en un solo objeto.
}
# Imprimir las dimensiones de los datos filtrados
dim(breseq_annotated_filtered)
## Resumir anotaciones como NS, S, pseudogénico o intergénico
for (i in seq(1,nrow(breseq_annotated_filtered))){
anno<-substr(breseq_annotated_filtered[i,"annotation"],1,5) #Extraer los primeros 5 caracteres de la columna "annotation"
if (anno=="pseud"){breseq_annotated_filtered[i,"Type"]="Pseudogene"} # Si la anotación comienza con "pseud", se clasifica como pseudogénico
else if (anno=="inter"){breseq_annotated_filtered[i,"Type"]="Intergenic"} #Si la anotación comienza con "inter", se clasifica como intergénico
else { # Extraer el primer y último carácter de la cadena de 5 caracteres (representan aminoácidos)
AA1<-substr(anno,1,1)  # Primer aminoácido
AA2<-substr(anno,5,5)  # Último aminoácido
if (AA1==AA2){breseq_annotated_filtered[i,"Type"]="S"} # Si el primer y último aminoácido son iguales, la mutación es sinónima (S)
else {breseq_annotated_filtered[i,"Type"]="NS"}   # Si son diferentes, la mutación es no sinónima (NS)
}
}
## Contar número de sitios fijos y polimorfismos en cada población en el pase 12
#' @title Contar Sitios Fijos y Polimorfismos en Cada Población en el Pase 12
#'
#' @description Este script calcula el número de mutaciones fijas y polimorfismos en cada población en el pase 12, excluyendo las mutaciones de resistencia adquiridas antes de la evolución experimental. También realiza análisis estadísticos para comparar los conteos entre diferentes poblaciones e identifica poblaciones mutadoras.
#'
#' @details
#' El script incluye los siguientes análisis:
#' \itemize{
#'   \item Cuenta el número de mutaciones fijas (tanto sinónimas como no sinónimas) en cada población en el pase 12, excluyendo las mutaciones de resistencia.
#'   \item Calcula la media y la desviación estándar del conteo de mutaciones fijas y realiza una prueba t para comparar el número de mutaciones fijas entre diferentes poblaciones.
#'   \item Cuenta el número de polimorfismos (tanto sinónimos como no sinónimos) en cada población en el pase 12, excluyendo las mutaciones de resistencia.
#'   \item Calcula la media y la desviación estándar del conteo de polimorfismos y realiza una prueba t para comparar el número de polimorfismos entre diferentes poblaciones.
#'   \item Identifica poblaciones mutadoras basándose en criterios específicos y realiza una prueba t para comparar el número de mutaciones fijas entre poblaciones mutadoras y no mutadoras.
#' }
#'
#' @importFrom readxl read_excel
#' @param Costs_of_res Un data frame que contiene posiciones de mutaciones de resistencia a excluir del conteo.
#' @param breseq_annotated_filtered Un data frame que contiene datos de mutaciones, incluyendo información de pase, tipo, posición, frecuencia y línea.
#' @return Imprime la media, la desviación estándar y los resultados de las pruebas t para el número de mutaciones fijas y polimorfismos en cada población, y proporciona comparaciones entre poblaciones mutadoras y no mutadoras.
#' @examples
#' \dontrun{
#' # Cargar los datos necesarios y ejecutar el script para calcular los conteos y realizar los análisis
#' }
#' @export
### Mutaciones fijas (todos los tipos)
### Excluir mutaciones de resistencia del conteo (porque fueron adquiridas antes de la evolución experimental)
Costs_of_res <- read_excel("/Users/mpalma/Documents/Reprohack/loss-of-resistance/Costs_of_res.xlsx") #Cargar el archivo de Excel con las mutaciones de resistencia.
res_mutations<-unique(Costs_of_res$Position) # Extrae las posiciones de las mutaciones de resistencia y las almacena en un vector -res_mutations-.
#Filtrar las mutaciones que ocurrieron en el pase 12, filtrar las mutaciones que son sinónimas (S) o no sinónimas (NS) y excluir las mutaciones de resistencia (aquellas que están en res_mutations).
a<-aggregate(breseq_annotated_filtered[breseq_annotated_filtered$Passage=="P12" & breseq_annotated_filtered$Type%in%c("NS","S") & !breseq_annotated_filtered$position%in%c(res_mutations),"freq"],by=list(breseq_annotated_filtered[breseq_annotated_filtered$Passage=="P12" & breseq_annotated_filtered$Type%in%c("NS","S") & !breseq_annotated_filtered$position%in%c(res_mutations),"Line"]),FUN=function(x){length(x[x==1])})
mean(a$x) #Calcula la media del número de mutaciones fijas por población.
sd(a$x) #Calcula la desviación estándar del número de mutaciones fijas por población.
t.test(x~(substr(a$Group.1,1,3)=="ANC"),a,var.equal=T) # Realiza una prueba t para comparar el número de mutaciones fijas entre diferentes poblaciones.
### Polimorfismos (todos los tipos)
p<-aggregate(breseq_annotated_filtered[breseq_annotated_filtered$Passage=="P12" & breseq_annotated_filtered$Type%in%c("NS","S") & !breseq_annotated_filtered$position%in%c(res_mutations),"freq"],by=list(breseq_annotated_filtered[breseq_annotated_filtered$Passage=="P12" & breseq_annotated_filtered$Type%in%c("NS","S") & !breseq_annotated_filtered$position%in%c(res_mutations),"Line"]),FUN=function(x){length(x[x<1])})
mean(p$x)
sd(p$x)
t.test(x~(substr(p$Group.1,1,3)=="ANC"),p,var.equal=T)
### Mutaciones fijas en poblaciones mutadoras (dentro de genes)
mut<-c("FMS13","MS1","MS10","MS15","QAC4") #Lista que contiene los nombres de las poblaciones que han sido identificadas como mutantes.
p[p$Group.1%in%mut,"Mutador"]<-"Y" #Asigna "Y" a las poblaciones que están en la lista mut y "N" a las que no lo están.
p[!p$Group.1%in%mut,"Mutador"]<-"N"
t.test(x~Mutador,p,alternative="less",var.equal=T) #Realizar una prueba t para comparar el número de polimorfismos entre las poblaciones (Y) y (N).
#--- Figure 4: Genomic parallelism across populations----
#' @title Paralelismo Genómico Entre Poblaciones: Análisis de Similaridad Sørensen-Dice
#'
#' @description Este script analiza el paralelismo genómico entre poblaciones iniciadas con bacterias resistentes a fagos. Identifica mutaciones no sinónimas que no están fijas en el pase 0, construye una matriz de genes, calcula los coeficientes de similitud Sørensen-Dice para todos los pares de muestras y anota los genes de resistencia de las poblaciones.
#'
#' @details
#' El script realiza los siguientes pasos:
#' \itemize{
#'   \item Identifica poblaciones iniciadas con bacterias resistentes a fagos, excluyendo controles ancestrales.
#'   \item Construye un data frame de mutaciones no sinónimas que no están fijas en el pase 0 en estas poblaciones.
#'   \item Crea una matriz de genes utilizando solo mutaciones no fijas en el pase 0.
#'   \item Calcula los coeficientes de similitud Sørensen-Dice para cada par de muestras para evaluar el grado de superposición en las mutaciones genéticas entre muestras.
#'   \item Anota los genes de resistencia de las poblaciones y determina si los pares de muestras tienen los mismos o diferentes genes de resistencia.
#' }
#'
#' @param breseq_annotated_filtered Un data frame que contiene datos anotados de mutaciones, incluyendo línea, pase, posición, tipo, frecuencia, gen y información de muestra.
#' @param Costs_of_res Un data frame que contiene información sobre los genes de resistencia asociados con diferentes poblaciones.
#' @return Un data frame (`sim_coef_NS_noP0`) que contiene los coeficientes de similitud Sørensen-Dice para cada par de muestras, anotado con información de genes de resistencia y si las muestras comparten los mismos o diferentes genes de resistencia.
#' @examples
#' \dontrun{
#' # Ejecutar el script para calcular los coeficientes de similitud y anotar los genes de resistencia entre poblaciones
#' }
#' @export
### Generate names of populations initiated with phage-resistant bacteria only (exclude ancestral controls)
n<-unique(breseq_annotated_filtered[substr(breseq_annotated_filtered$Line,1,3)!="ANC","Line"]) # Generando un vector "n" con los nombres de las poblaciones de interés que no son ancestrales.
### Form a data frame of non-synonymous mutations not fixed at Psg 0 only
breseq_NS_noP0<-data.frame(matrix(nrow=0,ncol=ncol(breseq_annotated_filtered))) #Crea un data frame vacío con el mismo número de columnas que el data frame original
for (line in n){ #Itera sobre cada población identificada.
P0_mutations<-breseq_annotated_filtered[breseq_annotated_filtered$Line==line & breseq_annotated_filtered$Passage=="P0" & breseq_annotated_filtered$freq==1,"position"] #Obtiene las posiciones de mutaciones que están fijas (frecuencia igual a 1) en el pase 0.
###rows corresponding to P2/P12 mutations not fixed in P0 of this sample
sample_data<-breseq_annotated_filtered[breseq_annotated_filtered$Line==line & breseq_annotated_filtered$Passage!="P0" & !breseq_annotated_filtered$position%in%P0_mutations & breseq_annotated_filtered$Type=="NS",] #Selecciona las mutaciones no sinónimas (Type == "NS") que no están fijas en el pase 0
breseq_NS_noP0<-rbind(breseq_NS_noP0,sample_data) # Agregar las mutaciones relevantes a breseq_NS_noP0.
}
### Make a gene matrix using only mutations not fixed in P0
gene_list<-sort(unique(breseq_NS_noP0$"gene_2")) #Extraer la columna gene_2 del data frame breseq_NS_noP0, que contiene los nombres de los genes asociados con las mutaciones. unique= Obtiene los nombres únicos de los genes, eliminando duplicados.sort=Ordena alfabéticamente la lista de genes.
sample_list<-unique(breseq_NS_noP0$Sample) #Extrae la columna Sample, que contiene las identificaciones de las muestras.
LOR_gene_matrix_NS_noP0<-gene_matrix_annotated(breseq_NS_noP0,gene_list,sample_list,0)
### Calculate Sørensen-Dice similarity coefficients for every pair of samples
all_pairs<-combn(sample_list,2) #Genera todas las combinaciones posibles de pares de muestras (2 a la vez).
sim_coef_NS_noP0<-data.frame(matrix(nrow=0,ncol=3)) #Crea un data frame vacío con 3 columnas y sin filas. Este data frame se llenará con los resultados de similitud.
for (i in seq(1,ncol(all_pairs))){ #Itera sobre cada columna en all_pairs, que contiene los pares de muestras.
sample1<-all_pairs[1,i] #Asigna las dos muestras del par actual.
sample2<-all_pairs[2,i]
### Names of genes with any mutations from ancestral genotype (any number of independent mutations per gene)
#obtienen los genes con mutaciones y se verifica qué genes tienen mutaciones (valores > 0).
sample1_genes<-names(LOR_gene_matrix_NS_noP0[sample1,apply(data.frame(LOR_gene_matrix_NS_noP0[sample1,]),1,function(x){x>0})])
sample2_genes<-names(LOR_gene_matrix_NS_noP0[sample2,apply(data.frame(LOR_gene_matrix_NS_noP0[sample2,]),1,function(x){x>0})])
### Calculate the extent of overlap
#Calcular la extensión del solapamiento
sim_coef<-(2*length(intersect(sample1_genes,sample2_genes))) / (length(sample1_genes) + length(sample2_genes))
sim_coef_NS_noP0<-rbind(sim_coef_NS_noP0,c(sample1,sample2,sim_coef))
}
colnames(sim_coef_NS_noP0)=c("sample1","sample2","sim_coef")
sim_coef_NS_noP0$sim_coef<-as.numeric(sim_coef_NS_noP0$sim_coef) #sim_coef almacena el valor de similitud Sørensen-Dice, que varía entre 0 (sin superposición) y 1 (muestras idénticas en términos de genes mutados).
for (i in seq(1,nrow(sim_coef_NS_noP0))){
sim_coef_NS_noP0[i,"line1"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample1"],split="_"))[1]
sim_coef_NS_noP0[i,"passage1"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample1"],split="_"))[2]
sim_coef_NS_noP0[i,"line2"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample2"],split="_"))[1]
sim_coef_NS_noP0[i,"passage2"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample2"],split="_"))[2]
# buscar en el data frame Costs_of_res la fila correspondiente a la población específica (definida en line1) y extrae el nombre del gen de resistencia asociado. Se hace lo mismo con line2 para la segunda muestra.
sim_coef_NS_noP0[i,"gene1"]=as.character(unique(Costs_of_res[Costs_of_res$Population==sim_coef_NS_noP0[i,"line1"],"Gene"]))
sim_coef_NS_noP0[i,"gene2"]=as.character(unique(Costs_of_res[Costs_of_res$Population==sim_coef_NS_noP0[i,"line2"],"Gene"]))
}
# Annotate whether pairs have the same or different resistance genes
#Verificar que tanto gene1 como gene2 no sean valores NA (es decir, que haya un gen anotado para ambas muestras).Comparar si los genes de resistencia de las dos muestras son iguales.
#Si las dos condiciones se cumplen, asigna el valor "same" a la nueva columna same_gene. Si los genes no son iguales se agrega "different".
sim_coef_NS_noP0[!is.na(sim_coef_NS_noP0$gene1) & !is.na(sim_coef_NS_noP0$gene2) & sim_coef_NS_noP0$gene1==sim_coef_NS_noP0$gene2,"same_gene"]="same"
sim_coef_NS_noP0[!is.na(sim_coef_NS_noP0$gene1) & !is.na(sim_coef_NS_noP0$gene2) & sim_coef_NS_noP0$gene1!=sim_coef_NS_noP0$gene2,"same_gene"]="different"
sim_coef_NS_noP0
sim_coef_NS_noP0
# Annotate whether pairs have the same or different resistance genes
#Verificar que tanto gene1 como gene2 no sean valores NA (es decir, que haya un gen anotado para ambas muestras).Comparar si los genes de resistencia de las dos muestras son iguales.
#Si las dos condiciones se cumplen, asigna el valor "same" a la nueva columna same_gene. Si los genes no son iguales se agrega "different".
sim_coef_NS_noP0[!is.na(sim_coef_NS_noP0$gene1) & !is.na(sim_coef_NS_noP0$gene2) & sim_coef_NS_noP0$gene1==sim_coef_NS_noP0$gene2,"same_gene"]="same"
sim_coef_NS_noP0[!is.na(sim_coef_NS_noP0$gene1) & !is.na(sim_coef_NS_noP0$gene2) & sim_coef_NS_noP0$gene1!=sim_coef_NS_noP0$gene2,"same_gene"]="different"
test_gene_df
for (i in seq(1,nrow(sim_coef_NS_noP0))){
sim_coef_NS_noP0[i,"line1"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample1"],split="_"))[1]
sim_coef_NS_noP0[i,"passage1"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample1"],split="_"))[2]
sim_coef_NS_noP0[i,"line2"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample2"],split="_"))[1]
sim_coef_NS_noP0[i,"passage2"]<-unlist(strsplit(sim_coef_NS_noP0[i,"sample2"],split="_"))[2]
# buscar en el data frame Costs_of_res la fila correspondiente a la población específica (definida en line1) y extrae el nombre del gen de resistencia asociado. Se hace lo mismo con line2 para la segunda muestra.
sim_coef_NS_noP0[i,"gene1"]=as.character(unique(Costs_of_res[Costs_of_res$Population==sim_coef_NS_noP0[i,"line1"],"Gene"]))
sim_coef_NS_noP0[i,"gene2"]=as.character(unique(Costs_of_res[Costs_of_res$Population==sim_coef_NS_noP0[i,"line2"],"Gene"]))
}
# Annotate whether pairs have the same or different resistance genes
#Verificar que tanto gene1 como gene2 no sean valores NA (es decir, que haya un gen anotado para ambas muestras).Comparar si los genes de resistencia de las dos muestras son iguales.
#Si las dos condiciones se cumplen, asigna el valor "same" a la nueva columna same_gene. Si los genes no son iguales se agrega "different".
sim_coef_NS_noP0[!is.na(sim_coef_NS_noP0$gene1) & !is.na(sim_coef_NS_noP0$gene2) & sim_coef_NS_noP0$gene1==sim_coef_NS_noP0$gene2,"same_gene"]="same"
sim_coef_NS_noP0[!is.na(sim_coef_NS_noP0$gene1) & !is.na(sim_coef_NS_noP0$gene2) & sim_coef_NS_noP0$gene1!=sim_coef_NS_noP0$gene2,"same_gene"]="different"
### Construct test statistic
# Filtrar el data frame sim_coef_NS_noP0 para analizar únicamente las muestras del pase 2 (P2), excluyendo aquellas donde los genes de resistencia (gene1 y gene2) sean NA.
tmp<-sim_coef_NS_noP0[sim_coef_NS_noP0$passage1=="P2" & sim_coef_NS_noP0$passage2=="P2" & !is.na(sim_coef_NS_noP0$gene1) & !is.na(sim_coef_NS_noP0$gene2),]
test_same_P2<-tmp[tmp$same_gene=="same","sim_coef"] #Extraer los coeficientes de similitud Sørensen-Dice para los pares de muestras que comparten el mismo gen de resistencia (same_gene == "same").
test_diff_P2<-tmp[tmp$same_gene=="different","sim_coef"] #Extraer los coeficientes de similitud para los pares de muestras que tienen genes de resistencia diferentes (same_gene == "different").
test_gene_P2<-mean(test_same_P2)-mean(test_diff_P2) #promedio en los coeficientes de similitud entre los pares de muestras con el mismo gen de resistencia y aquellos con genes de resistencia diferentes.
### Randomization & resampling
perm_gene_P2<-c() # Crear un vector vacío para almacenar los resultados de las permutaciones.
set.seed(123) # Fijar la semilla para la reproducibilidad.
for (i in seq(1,10000)){ # Realizar 10,000 permutaciones.
tmp$same_gene<-sample(tmp$same_gene,replace=F)  # Barajar la columna same_gene sin reemplazo
perm_same_P2<-mean(tmp[tmp$same_gene=="same","sim_coef"]) # Calcular el promedio de los coeficientes de similitud para los pares con el mismo gen de resistencia.
perm_diff_P2<-mean(tmp[tmp$same_gene=="different","sim_coef"]) # Calcular el promedio de los coeficientes de similitud para los pares con genes de resistencia diferentes.
perm_gene_P2<-c(perm_gene_P2,perm_same_P2-perm_diff_P2) # Almacenar la diferencia en los coeficientes de similitud de esta permutación.
}
### p-value (proportion of permutations more extreme than observed value)
print(length(perm_gene_P2[perm_gene_P2>=test_gene_P2])/length(perm_gene_P2)) # Calcular y mostrar el valor p.
# Prepare data
# Crear un data frame con los coeficientes de similitud y etiquetas para las categorías "mismo gen de resistencia" y "diferente gen de resistencia".
test_gene_df <- data.frame(
sim_coef = c(test_same_P2, test_diff_P2),
label = c(rep("Same\nresistance\ngene", length(test_same_P2)), rep("Different\nresistance\ngene", length(test_diff_P2)))
)
test_gene_df
dim(test_gene_df)
22*21
## Identificar qué genes fueron mutados en qué poblaciones
# Crear un data frame que cuente cuántas veces aparece cada descripción de gen por cada línea (Line) en el pase 2 (P2).
top_genes_in_study <- data.frame(table(breseq_NS_noP0[breseq_NS_noP0$Passage=="P2", "description"], breseq_NS_noP0[breseq_NS_noP0$Passage=="P2", "Line"]))
colnames(top_genes_in_study) = c("description", "Line", "hits") # Renombrar las columnas como "description", "Line", y "hits" (frecuencia de aparición).
top_genes <- names(tail(sort(table(top_genes_in_study[top_genes_in_study$hits > 0, "description"])), 20)) # Identificar los 20 genes más comunes en el estudio, excluyendo aquellos que no tienen hits.
### Construir un data frame de mutaciones que aparecieron para el Día 6, excluyendo mutaciones de resistencia a fagos o cualquier otra mutación fija antes del inicio del experimento
breseq_gene_analysis <- data.frame(table(breseq_NS_noP0[breseq_NS_noP0$Passage=="P2", "description"], breseq_NS_noP0[breseq_NS_noP0$Passage=="P2", "Line"]))
colnames(breseq_gene_analysis) = c("gene", "Line", "hits") # Renombrar las columnas como "gene", "Line", y "hits" para el nuevo data frame.
# Definir los vectores o listas de valores correspondientes a cada gen de resistencia
rfbA <- c("FMS6", "VCM4", "MS2", "FMS4", "MS10", "QAC4")# Definir las líneas que tienen el gen de resistencia "rfbA"
glycosyl <- c("VCM19", "MS12", "FMS13", "SNK12", "QAC3", "SNK11", "VCM17", "SNK6", "MS1") # Definir las líneas que tienen el gen de resistencia "glycosyl".
glycoside <- c("SNK7", "FMS11", "FMS12", "FMS9", "FMS16")  # Definir las líneas que tienen el gen de resistencia "glycoside".
### Anotar cada población por su gen de resistencia
breseq_gene_analysis[breseq_gene_analysis$Line %in% rfbA, "res_gene"] <- "rfbA" # Asignar "rfbA" como el gen de resistencia para las líneas que pertenecen a rfbA.
### Anotar cada población por su gen de resistencia
breseq_gene_analysis[breseq_gene_analysis$Line %in% rfbA, "res_gene"] <- "rfbA" # Asignar "rfbA" como el gen de resistencia para las líneas que pertenecen a rfbA.
### Anotar cada población por su gen de resistencia
breseq_gene_analysis[breseq_gene_analysis$Line %in% rfbA, "res_gene"] <- "rfbA" # Asignar "rfbA" como el gen de resistencia para las líneas que pertenecen a rfbA.
breseq_gene_analysis[breseq_gene_analysis$Line %in% glycosyl, "res_gene"] <- "glycosyl" # Asignar "glycosyl" como el gen de resistencia para las líneas que pertenecen a glycosyl.
breseq_gene_analysis[breseq_gene_analysis$Line %in% glycoside, "res_gene"] <- "glycoside" # Asignar "glycoside" como el gen de resistencia para las líneas que pertenecen a glycoside.
# Eliminar filas donde res_gene es NA
breseq_gene_analysis <- breseq_gene_analysis[!is.na(breseq_gene_analysis$res_gene), ] # Eliminar filas donde no se haya asignado un gen de resistencia (NA en res_gene).
### Calcular el porcentaje de poblaciones con cada gen de resistencia que mutó en cada uno de los otros genes
breseq_gene_props <- data.frame(matrix(nrow = 0, ncol = 3)) # Crear un data frame vacío con 3 columnas para almacenar los resultados: gen, gen de resistencia, y porcentaje de poblaciones.
### Calcular el porcentaje de poblaciones con cada gen de resistencia que mutó en cada uno de los otros genes
breseq_gene_props <- data.frame(matrix(nrow = 0, ncol = 3)) # Crear un data frame vacío con 3 columnas para almacenar los resultados: gen, gen de resistencia, y porcentaje de poblaciones.
l <- list(rfbA, glycosyl, glycoside) # Crear una lista con los grupos de líneas asociadas a cada gen de resistencia.
names(l) <- c("rfbA mutants", "PSPTO_4988 mutants", "PSPTO_4991 mutants") # Asignar nombres a cada grupo de líneas de resistencia.
# Iterar a través de los genes y calcular las proporciones de mutaciones
for (gene in top_genes) { # Iterar sobre cada gen en la lista de los genes más comunes.
for (j in seq_along(l)) { # Iterar sobre cada grupo de genes de resistencia (rfbA, glycosyl, glycoside).
res_gene <- l[[j]] # Obtener las líneas correspondientes al gen de resistencia actual.
#Calcular la proporción de poblaciones que tienen una mutación en el gen y en la línea correspondiente.
prop <- nrow(breseq_gene_analysis[breseq_gene_analysis$Line %in% res_gene &
breseq_gene_analysis$gene == gene &
breseq_gene_analysis$hits > 0, ]) /
nrow(breseq_gene_analysis[breseq_gene_analysis$Line %in% res_gene &
breseq_gene_analysis$gene == gene, ])
breseq_gene_props <- rbind(breseq_gene_props, c(gene, names(l)[j], prop)) # Añadir el resultado al data frame breseq_gene_props.
}
}
# Ordenar la columna 'res_gene' para que "rfbA mutants" aparezca primero, seguido de "PSPTO_4988 mutants" y luego "PSPTO_4991 mutants"
colnames(breseq_gene_props) # Mostrar los nombres actuales de las columnas.
colnames(breseq_gene_props) <- c("top_gene", "res_gene", "percent_pops") # Asignar los nombres correctos a las columnas del data frame.
# Convertir la columna 'res_gene' en un factor con un orden específico para que las categorías aparezcan en el orden deseado: "PSPTO_4991 mutants", "PSPTO_4988 mutants", y "rfbA mutants".
breseq_gene_props$res_gene <- factor(breseq_gene_props$res_gene, levels = c("PSPTO_4991 mutants", "PSPTO_4988 mutants", "rfbA mutants"))
breseq_gene_props$percent_pops <- as.numeric(breseq_gene_props$percent_pops) # Convertir la columna 'percent_pops' a tipo numérico para asegurar un formato adecuado para cálculos.
# Reemplazar cualquier valor de 0 en la columna 'percent_pops' con un valor muy pequeño (10^-4) para evitar problemas en las visualizaciones o cálculos futuros.
breseq_gene_props[breseq_gene_props$percent_pops == 0, "percent_pops"] <- 10^-4
# Reemplazar guiones problemáticos y asegurar una codificación adecuada
breseq_gene_props$top_gene <- gsub("‑", "-", breseq_gene_props$top_gene)
# Mantener el orden de los factores en el eje X
breseq_gene_props$top_gene <- factor(breseq_gene_props$top_gene, levels = rev(unique(breseq_gene_props$top_gene)))
breseq_gene_props
library(data.table)
start.time <- Sys.time()
triglycerides <- fread(file = "/Users/mpalma/Downloads/full_cohort/Triglycerides_INT.imputed.stats.gz", header = T)
end.time <- Sys.time()
head(triglycerides)
class(triglycerides)
dim(triglycerides)
triglycerides <- triglycerides[, .(CHROM, GENPOS, ID, P)]
triglycerides <- triglycerides[,.(CHR = CHROM, BP=GENPOS , SNP=ID, P)]
chr_len <- triglycerides[, .(chr_len = max(BP)), by = CHR]
chr_len[, tot := cumsum(as.numeric(chr_len)) - chr_len]
cum_triglycerides <- merge(triglycerides, chr_len[, .(CHR, tot)], by = "CHR")
cum_triglycerides
cum_triglycerides <- cum_triglycerides[order(CHR, BP)]
cum_triglycerides[, BPcum := BP + tot]
set.seed(123) # Establecer una semilla para reproducibilidad
sampled_data <- cum_triglycerides[P > 0.01][sample(.N, .N / 200)]
axisdf <- cum_triglycerides[, .(center = (max(BPcum) + min(BPcum)) / 2), by = CHR]
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=scales::number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")  +  # remove space between plot area and x axis
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x =   element_blank(),
axis.title.x = element_blank()
)
library(ggplot2)
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=scales::number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")  +  # remove space between plot area and x axis
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x =   element_blank(),
axis.title.x = element_blank()
)
ggsave("/Users/mpalma/Downloads/Manhattan_viernesbioinfo.png", plot = Manhattan_plot)
low_p_data <- cum_triglycerides[P <= 0.01]
sampled_high_p <- cum_triglycerides[P > 0.01][sample(.N, .N / 200)]
# Combinar ambos conjuntos de datos
sampled_data <- rbind(low_p_data, sampled_high_p)
library(ggplot2)
axisdf <- cum_triglycerides[, .(center = (max(BPcum) + min(BPcum)) / 2), by = CHR]
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=scales::number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")  +  # remove space between plot area and x axis
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x =   element_blank(),
axis.title.x = element_blank()
)
ggsave("/Users/mpalma/Downloads/Manhattan_viernesbioinfo.png", plot = Manhattan_plot)
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=scales::number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.title.x = element_blank()
)
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=scales::number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
# axis.ticks.x = element_blank(),
#  axis.text.x =   element_blank(),
axis.title.x = element_blank()
)
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=scales::number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")  +
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
# axis.ticks.x = element_blank(),
#  axis.text.x =   element_blank(),
axis.title.x = element_blank()
)
ggsave("/Users/mpalma/Downloads/Manhattan_viernesbioinfo.png", plot = Manhattan_plot)
print(Manhattan_plot)
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=scales::number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")  +
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x =   element_blank(),
axis.title.x = element_blank()
)
ggsave("/Users/mpalma/Downloads/Manhattan_viernesbioinfo.png", plot = Manhattan_plot)
print(Manhattan_plot)
library(scales)
Manhattan_plot <- ggplot(sampled_data, aes(x=BPcum, y=-log10(P))) +
# Graficar los puntos y azul y gris intercalado por cromosoma
geom_point( aes(color=as.factor(CHR)), alpha=0.8, size=0.5) +
scale_color_manual(values = rep(c("grey", "skyblue"), 22 )) +
# Personalizar ejes
scale_x_continuous( label = axisdf$CHR, breaks= axisdf$center ) +
scale_y_continuous(expand = c(0, 0), labels=number_format(accuracy = 0.1) , limits=c(25,0), trans = "reverse")  +
#### Añadir líneas de significancia
geom_hline(yintercept=-log10(1e-5), color = "black", linetype="dotted", linewidth=0.3) +
geom_hline(yintercept=-log10(5e-8), color = "black", linetype="dashed", linewidth=0.3) +
#### Añadir título
ggtitle("Triglycerides")+
# Detalles de tema:
theme_bw() +
theme(
legend.position="none",
panel.border = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
axis.ticks.x = element_blank(),
axis.text.x =   element_blank(),
axis.title.x = element_blank()
)
test <- 1 +10
test <- 1 +10
print(test)
test <- 1 +10
print(test)
